// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review-service/internal/data/model"
)

func newAppeal(db *gorm.DB, opts ...gen.DOOption) appeal {
	_appeal := appeal{}

	_appeal.appealDo.UseDB(db, opts...)
	_appeal.appealDo.UseModel(&model.Appeal{})

	tableName := _appeal.appealDo.TableName()
	_appeal.ALL = field.NewAsterisk(tableName)
	_appeal.ID = field.NewInt64(tableName, "id")
	_appeal.CreatedAt = field.NewTime(tableName, "created_at")
	_appeal.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appeal.CreatedBy = field.NewInt64(tableName, "created_by")
	_appeal.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_appeal.Version = field.NewInt32(tableName, "version")
	_appeal.DeletedAt = field.NewField(tableName, "deleted_at")
	_appeal.AppealID = field.NewInt64(tableName, "appeal_id")
	_appeal.ReviewID = field.NewInt64(tableName, "review_id")
	_appeal.Reason = field.NewString(tableName, "reason")
	_appeal.Content = field.NewString(tableName, "content")
	_appeal.SellerID = field.NewInt64(tableName, "seller_id")
	_appeal.Pictures = field.NewString(tableName, "pictures")
	_appeal.Videos = field.NewString(tableName, "videos")
	_appeal.Status = field.NewString(tableName, "status")
	_appeal.OpNote = field.NewString(tableName, "op_note")
	_appeal.OpProcessAt = field.NewTime(tableName, "op_process_at")
	_appeal.OpProcessBy = field.NewInt64(tableName, "op_process_by")
	_appeal.ExtJSON = field.NewString(tableName, "ext_json")
	_appeal.CtrlJSON = field.NewString(tableName, "ctrl_json")

	_appeal.fillFieldMap()

	return _appeal
}

type appeal struct {
	appealDo appealDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	CreatedBy   field.Int64 // User ID
	UpdatedBy   field.Int64 // User ID
	Version     field.Int32 // Optimistic locking
	DeletedAt   field.Field // Soft delete
	AppealID    field.Int64
	ReviewID    field.Int64
	Reason      field.String // Appeal reason
	Content     field.String // Appeal content
	SellerID    field.Int64
	Pictures    field.String // Appeal pictures
	Videos      field.String // Appeal videos
	Status      field.String
	OpNote      field.String // Operator note
	OpProcessAt field.Time   // Operator process time
	OpProcessBy field.Int64  // Operator process user ID
	ExtJSON     field.String // Extended information
	CtrlJSON    field.String // Control information

	fieldMap map[string]field.Expr
}

func (a appeal) Table(newTableName string) *appeal {
	a.appealDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appeal) As(alias string) *appeal {
	a.appealDo.DO = *(a.appealDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appeal) updateTableName(table string) *appeal {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.CreatedBy = field.NewInt64(table, "created_by")
	a.UpdatedBy = field.NewInt64(table, "updated_by")
	a.Version = field.NewInt32(table, "version")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.AppealID = field.NewInt64(table, "appeal_id")
	a.ReviewID = field.NewInt64(table, "review_id")
	a.Reason = field.NewString(table, "reason")
	a.Content = field.NewString(table, "content")
	a.SellerID = field.NewInt64(table, "seller_id")
	a.Pictures = field.NewString(table, "pictures")
	a.Videos = field.NewString(table, "videos")
	a.Status = field.NewString(table, "status")
	a.OpNote = field.NewString(table, "op_note")
	a.OpProcessAt = field.NewTime(table, "op_process_at")
	a.OpProcessBy = field.NewInt64(table, "op_process_by")
	a.ExtJSON = field.NewString(table, "ext_json")
	a.CtrlJSON = field.NewString(table, "ctrl_json")

	a.fillFieldMap()

	return a
}

func (a *appeal) WithContext(ctx context.Context) IAppealDo { return a.appealDo.WithContext(ctx) }

func (a appeal) TableName() string { return a.appealDo.TableName() }

func (a appeal) Alias() string { return a.appealDo.Alias() }

func (a appeal) Columns(cols ...field.Expr) gen.Columns { return a.appealDo.Columns(cols...) }

func (a *appeal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appeal) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 20)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["updated_by"] = a.UpdatedBy
	a.fieldMap["version"] = a.Version
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["appeal_id"] = a.AppealID
	a.fieldMap["review_id"] = a.ReviewID
	a.fieldMap["reason"] = a.Reason
	a.fieldMap["content"] = a.Content
	a.fieldMap["seller_id"] = a.SellerID
	a.fieldMap["pictures"] = a.Pictures
	a.fieldMap["videos"] = a.Videos
	a.fieldMap["status"] = a.Status
	a.fieldMap["op_note"] = a.OpNote
	a.fieldMap["op_process_at"] = a.OpProcessAt
	a.fieldMap["op_process_by"] = a.OpProcessBy
	a.fieldMap["ext_json"] = a.ExtJSON
	a.fieldMap["ctrl_json"] = a.CtrlJSON
}

func (a appeal) clone(db *gorm.DB) appeal {
	a.appealDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appeal) replaceDB(db *gorm.DB) appeal {
	a.appealDo.ReplaceDB(db)
	return a
}

type appealDo struct{ gen.DO }

type IAppealDo interface {
	gen.SubQuery
	Debug() IAppealDo
	WithContext(ctx context.Context) IAppealDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppealDo
	WriteDB() IAppealDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppealDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppealDo
	Not(conds ...gen.Condition) IAppealDo
	Or(conds ...gen.Condition) IAppealDo
	Select(conds ...field.Expr) IAppealDo
	Where(conds ...gen.Condition) IAppealDo
	Order(conds ...field.Expr) IAppealDo
	Distinct(cols ...field.Expr) IAppealDo
	Omit(cols ...field.Expr) IAppealDo
	Join(table schema.Tabler, on ...field.Expr) IAppealDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppealDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppealDo
	Group(cols ...field.Expr) IAppealDo
	Having(conds ...gen.Condition) IAppealDo
	Limit(limit int) IAppealDo
	Offset(offset int) IAppealDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppealDo
	Unscoped() IAppealDo
	Create(values ...*model.Appeal) error
	CreateInBatches(values []*model.Appeal, batchSize int) error
	Save(values ...*model.Appeal) error
	First() (*model.Appeal, error)
	Take() (*model.Appeal, error)
	Last() (*model.Appeal, error)
	Find() ([]*model.Appeal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appeal, err error)
	FindInBatches(result *[]*model.Appeal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appeal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppealDo
	Assign(attrs ...field.AssignExpr) IAppealDo
	Joins(fields ...field.RelationField) IAppealDo
	Preload(fields ...field.RelationField) IAppealDo
	FirstOrInit() (*model.Appeal, error)
	FirstOrCreate() (*model.Appeal, error)
	FindByPage(offset int, limit int) (result []*model.Appeal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppealDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appealDo) Debug() IAppealDo {
	return a.withDO(a.DO.Debug())
}

func (a appealDo) WithContext(ctx context.Context) IAppealDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appealDo) ReadDB() IAppealDo {
	return a.Clauses(dbresolver.Read)
}

func (a appealDo) WriteDB() IAppealDo {
	return a.Clauses(dbresolver.Write)
}

func (a appealDo) Session(config *gorm.Session) IAppealDo {
	return a.withDO(a.DO.Session(config))
}

func (a appealDo) Clauses(conds ...clause.Expression) IAppealDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appealDo) Returning(value interface{}, columns ...string) IAppealDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appealDo) Not(conds ...gen.Condition) IAppealDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appealDo) Or(conds ...gen.Condition) IAppealDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appealDo) Select(conds ...field.Expr) IAppealDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appealDo) Where(conds ...gen.Condition) IAppealDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appealDo) Order(conds ...field.Expr) IAppealDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appealDo) Distinct(cols ...field.Expr) IAppealDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appealDo) Omit(cols ...field.Expr) IAppealDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appealDo) Join(table schema.Tabler, on ...field.Expr) IAppealDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appealDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppealDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appealDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppealDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appealDo) Group(cols ...field.Expr) IAppealDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appealDo) Having(conds ...gen.Condition) IAppealDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appealDo) Limit(limit int) IAppealDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appealDo) Offset(offset int) IAppealDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appealDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppealDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appealDo) Unscoped() IAppealDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appealDo) Create(values ...*model.Appeal) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appealDo) CreateInBatches(values []*model.Appeal, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appealDo) Save(values ...*model.Appeal) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appealDo) First() (*model.Appeal, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appeal), nil
	}
}

func (a appealDo) Take() (*model.Appeal, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appeal), nil
	}
}

func (a appealDo) Last() (*model.Appeal, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appeal), nil
	}
}

func (a appealDo) Find() ([]*model.Appeal, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appeal), err
}

func (a appealDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appeal, err error) {
	buf := make([]*model.Appeal, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appealDo) FindInBatches(result *[]*model.Appeal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appealDo) Attrs(attrs ...field.AssignExpr) IAppealDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appealDo) Assign(attrs ...field.AssignExpr) IAppealDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appealDo) Joins(fields ...field.RelationField) IAppealDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appealDo) Preload(fields ...field.RelationField) IAppealDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appealDo) FirstOrInit() (*model.Appeal, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appeal), nil
	}
}

func (a appealDo) FirstOrCreate() (*model.Appeal, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appeal), nil
	}
}

func (a appealDo) FindByPage(offset int, limit int) (result []*model.Appeal, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appealDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appealDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appealDo) Delete(models ...*model.Appeal) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appealDo) withDO(do gen.Dao) *appealDo {
	a.DO = *do.(*gen.DO)
	return a
}
