// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review-service/internal/data/model"
)

func newReview(db *gorm.DB, opts ...gen.DOOption) review {
	_review := review{}

	_review.reviewDo.UseDB(db, opts...)
	_review.reviewDo.UseModel(&model.Review{})

	tableName := _review.reviewDo.TableName()
	_review.ALL = field.NewAsterisk(tableName)
	_review.ID = field.NewInt64(tableName, "id")
	_review.CreatedAt = field.NewTime(tableName, "created_at")
	_review.UpdatedAt = field.NewTime(tableName, "updated_at")
	_review.CreatedBy = field.NewInt64(tableName, "created_by")
	_review.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_review.Version = field.NewInt32(tableName, "version")
	_review.DeletedAt = field.NewField(tableName, "deleted_at")
	_review.ReviewID = field.NewInt64(tableName, "review_id")
	_review.Content = field.NewString(tableName, "content")
	_review.Rating = field.NewInt32(tableName, "rating")
	_review.ServiceRating = field.NewInt32(tableName, "service_rating")
	_review.DeliveryRating = field.NewInt32(tableName, "delivery_rating")
	_review.HasMedia = field.NewBool(tableName, "has_media")
	_review.Pictures = field.NewString(tableName, "pictures")
	_review.Videos = field.NewString(tableName, "videos")
	_review.OrderID = field.NewInt64(tableName, "order_id")
	_review.SkuID = field.NewInt64(tableName, "sku_id")
	_review.SpuID = field.NewInt64(tableName, "spu_id")
	_review.SellerID = field.NewInt64(tableName, "seller_id")
	_review.BuyerID = field.NewInt64(tableName, "buyer_id")
	_review.IsAnonymous = field.NewBool(tableName, "is_anonymous")
	_review.Status = field.NewString(tableName, "status")
	_review.Tags = field.NewString(tableName, "tags")
	_review.IsDefault = field.NewBool(tableName, "is_default")
	_review.HasReply = field.NewBool(tableName, "has_reply")
	_review.OpRejectReason = field.NewString(tableName, "op_reject_reason")
	_review.OpRejectAt = field.NewTime(tableName, "op_reject_at")
	_review.OpRejectBy = field.NewInt64(tableName, "op_reject_by")
	_review.OpNote = field.NewString(tableName, "op_note")
	_review.Snapshot = field.NewString(tableName, "snapshot")
	_review.ExtJSON = field.NewString(tableName, "ext_json")
	_review.CtrlJSON = field.NewString(tableName, "ctrl_json")

	_review.fillFieldMap()

	return _review
}

type review struct {
	reviewDo reviewDo

	ALL            field.Asterisk
	ID             field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	CreatedBy      field.Int64 // User ID
	UpdatedBy      field.Int64 // User ID
	Version        field.Int32 // Optimistic locking
	DeletedAt      field.Field // Soft delete
	ReviewID       field.Int64
	Content        field.String
	Rating         field.Int32 // Overall rating
	ServiceRating  field.Int32 // Seller service rating
	DeliveryRating field.Int32 // Delivery rating
	HasMedia       field.Bool
	Pictures       field.String // Review pictures
	Videos         field.String // Review videos
	OrderID        field.Int64
	SkuID          field.Int64
	SpuID          field.Int64
	SellerID       field.Int64
	BuyerID        field.Int64
	IsAnonymous    field.Bool
	Status         field.String
	Tags           field.String // Related tags
	IsDefault      field.Bool
	HasReply       field.Bool
	OpRejectReason field.String // Operator reject reason
	OpRejectAt     field.Time   // Operator reject time
	OpRejectBy     field.Int64  // Operator reject user ID
	OpNote         field.String // Operator note
	Snapshot       field.String // Snapshot of the review
	ExtJSON        field.String // Extended information
	CtrlJSON       field.String // Control information

	fieldMap map[string]field.Expr
}

func (r review) Table(newTableName string) *review {
	r.reviewDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r review) As(alias string) *review {
	r.reviewDo.DO = *(r.reviewDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *review) updateTableName(table string) *review {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.CreatedBy = field.NewInt64(table, "created_by")
	r.UpdatedBy = field.NewInt64(table, "updated_by")
	r.Version = field.NewInt32(table, "version")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.ReviewID = field.NewInt64(table, "review_id")
	r.Content = field.NewString(table, "content")
	r.Rating = field.NewInt32(table, "rating")
	r.ServiceRating = field.NewInt32(table, "service_rating")
	r.DeliveryRating = field.NewInt32(table, "delivery_rating")
	r.HasMedia = field.NewBool(table, "has_media")
	r.Pictures = field.NewString(table, "pictures")
	r.Videos = field.NewString(table, "videos")
	r.OrderID = field.NewInt64(table, "order_id")
	r.SkuID = field.NewInt64(table, "sku_id")
	r.SpuID = field.NewInt64(table, "spu_id")
	r.SellerID = field.NewInt64(table, "seller_id")
	r.BuyerID = field.NewInt64(table, "buyer_id")
	r.IsAnonymous = field.NewBool(table, "is_anonymous")
	r.Status = field.NewString(table, "status")
	r.Tags = field.NewString(table, "tags")
	r.IsDefault = field.NewBool(table, "is_default")
	r.HasReply = field.NewBool(table, "has_reply")
	r.OpRejectReason = field.NewString(table, "op_reject_reason")
	r.OpRejectAt = field.NewTime(table, "op_reject_at")
	r.OpRejectBy = field.NewInt64(table, "op_reject_by")
	r.OpNote = field.NewString(table, "op_note")
	r.Snapshot = field.NewString(table, "snapshot")
	r.ExtJSON = field.NewString(table, "ext_json")
	r.CtrlJSON = field.NewString(table, "ctrl_json")

	r.fillFieldMap()

	return r
}

func (r *review) WithContext(ctx context.Context) IReviewDo { return r.reviewDo.WithContext(ctx) }

func (r review) TableName() string { return r.reviewDo.TableName() }

func (r review) Alias() string { return r.reviewDo.Alias() }

func (r review) Columns(cols ...field.Expr) gen.Columns { return r.reviewDo.Columns(cols...) }

func (r *review) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *review) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 32)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["created_by"] = r.CreatedBy
	r.fieldMap["updated_by"] = r.UpdatedBy
	r.fieldMap["version"] = r.Version
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["review_id"] = r.ReviewID
	r.fieldMap["content"] = r.Content
	r.fieldMap["rating"] = r.Rating
	r.fieldMap["service_rating"] = r.ServiceRating
	r.fieldMap["delivery_rating"] = r.DeliveryRating
	r.fieldMap["has_media"] = r.HasMedia
	r.fieldMap["pictures"] = r.Pictures
	r.fieldMap["videos"] = r.Videos
	r.fieldMap["order_id"] = r.OrderID
	r.fieldMap["sku_id"] = r.SkuID
	r.fieldMap["spu_id"] = r.SpuID
	r.fieldMap["seller_id"] = r.SellerID
	r.fieldMap["buyer_id"] = r.BuyerID
	r.fieldMap["is_anonymous"] = r.IsAnonymous
	r.fieldMap["status"] = r.Status
	r.fieldMap["tags"] = r.Tags
	r.fieldMap["is_default"] = r.IsDefault
	r.fieldMap["has_reply"] = r.HasReply
	r.fieldMap["op_reject_reason"] = r.OpRejectReason
	r.fieldMap["op_reject_at"] = r.OpRejectAt
	r.fieldMap["op_reject_by"] = r.OpRejectBy
	r.fieldMap["op_note"] = r.OpNote
	r.fieldMap["snapshot"] = r.Snapshot
	r.fieldMap["ext_json"] = r.ExtJSON
	r.fieldMap["ctrl_json"] = r.CtrlJSON
}

func (r review) clone(db *gorm.DB) review {
	r.reviewDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r review) replaceDB(db *gorm.DB) review {
	r.reviewDo.ReplaceDB(db)
	return r
}

type reviewDo struct{ gen.DO }

type IReviewDo interface {
	gen.SubQuery
	Debug() IReviewDo
	WithContext(ctx context.Context) IReviewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReviewDo
	WriteDB() IReviewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReviewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReviewDo
	Not(conds ...gen.Condition) IReviewDo
	Or(conds ...gen.Condition) IReviewDo
	Select(conds ...field.Expr) IReviewDo
	Where(conds ...gen.Condition) IReviewDo
	Order(conds ...field.Expr) IReviewDo
	Distinct(cols ...field.Expr) IReviewDo
	Omit(cols ...field.Expr) IReviewDo
	Join(table schema.Tabler, on ...field.Expr) IReviewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReviewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReviewDo
	Group(cols ...field.Expr) IReviewDo
	Having(conds ...gen.Condition) IReviewDo
	Limit(limit int) IReviewDo
	Offset(offset int) IReviewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewDo
	Unscoped() IReviewDo
	Create(values ...*model.Review) error
	CreateInBatches(values []*model.Review, batchSize int) error
	Save(values ...*model.Review) error
	First() (*model.Review, error)
	Take() (*model.Review, error)
	Last() (*model.Review, error)
	Find() ([]*model.Review, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Review, err error)
	FindInBatches(result *[]*model.Review, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Review) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReviewDo
	Assign(attrs ...field.AssignExpr) IReviewDo
	Joins(fields ...field.RelationField) IReviewDo
	Preload(fields ...field.RelationField) IReviewDo
	FirstOrInit() (*model.Review, error)
	FirstOrCreate() (*model.Review, error)
	FindByPage(offset int, limit int) (result []*model.Review, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReviewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reviewDo) Debug() IReviewDo {
	return r.withDO(r.DO.Debug())
}

func (r reviewDo) WithContext(ctx context.Context) IReviewDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reviewDo) ReadDB() IReviewDo {
	return r.Clauses(dbresolver.Read)
}

func (r reviewDo) WriteDB() IReviewDo {
	return r.Clauses(dbresolver.Write)
}

func (r reviewDo) Session(config *gorm.Session) IReviewDo {
	return r.withDO(r.DO.Session(config))
}

func (r reviewDo) Clauses(conds ...clause.Expression) IReviewDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reviewDo) Returning(value interface{}, columns ...string) IReviewDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reviewDo) Not(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reviewDo) Or(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reviewDo) Select(conds ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reviewDo) Where(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reviewDo) Order(conds ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reviewDo) Distinct(cols ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reviewDo) Omit(cols ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reviewDo) Join(table schema.Tabler, on ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reviewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReviewDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reviewDo) RightJoin(table schema.Tabler, on ...field.Expr) IReviewDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reviewDo) Group(cols ...field.Expr) IReviewDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reviewDo) Having(conds ...gen.Condition) IReviewDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reviewDo) Limit(limit int) IReviewDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reviewDo) Offset(offset int) IReviewDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reviewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reviewDo) Unscoped() IReviewDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reviewDo) Create(values ...*model.Review) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reviewDo) CreateInBatches(values []*model.Review, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reviewDo) Save(values ...*model.Review) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reviewDo) First() (*model.Review, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) Take() (*model.Review, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) Last() (*model.Review, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) Find() ([]*model.Review, error) {
	result, err := r.DO.Find()
	return result.([]*model.Review), err
}

func (r reviewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Review, err error) {
	buf := make([]*model.Review, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reviewDo) FindInBatches(result *[]*model.Review, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reviewDo) Attrs(attrs ...field.AssignExpr) IReviewDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reviewDo) Assign(attrs ...field.AssignExpr) IReviewDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reviewDo) Joins(fields ...field.RelationField) IReviewDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reviewDo) Preload(fields ...field.RelationField) IReviewDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reviewDo) FirstOrInit() (*model.Review, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) FirstOrCreate() (*model.Review, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Review), nil
	}
}

func (r reviewDo) FindByPage(offset int, limit int) (result []*model.Review, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reviewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reviewDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reviewDo) Delete(models ...*model.Review) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reviewDo) withDO(do gen.Dao) *reviewDo {
	r.DO = *do.(*gen.DO)
	return r
}
