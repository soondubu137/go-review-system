// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsInternal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL.String() && e.Code == 500
}

func ErrorInternal(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL.String(), fmt.Sprintf(format, args...))
}

func IsNeedLogin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NEED_LOGIN.String() && e.Code == 401
}

func ErrorNeedLogin(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_NEED_LOGIN.String(), fmt.Sprintf(format, args...))
}

func IsInvalidUserId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_USER_ID.String() && e.Code == 400
}

func ErrorInvalidUserId(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_USER_ID.String(), fmt.Sprintf(format, args...))
}

func IsInvalidReviewId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_REVIEW_ID.String() && e.Code == 400
}

func ErrorInvalidReviewId(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_REVIEW_ID.String(), fmt.Sprintf(format, args...))
}

func IsInvalidAppealId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_APPEAL_ID.String() && e.Code == 400
}

func ErrorInvalidAppealId(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_APPEAL_ID.String(), fmt.Sprintf(format, args...))
}

func IsOrderAlreadyReviewed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_ALREADY_REVIEWED.String() && e.Code == 400
}

func ErrorOrderAlreadyReviewed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_ALREADY_REVIEWED.String(), fmt.Sprintf(format, args...))
}
